#!/bin/bash
#
# Copyright (C) 2016 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

logcat=$1
str_res=""
res=0

packagename=$(basename `cd $packagedir ; pwd`)
metapackagename=$(dirname `cd $packagedir ; pwd`)
testname=${PWD##*/}
packagename=${PWD%%/$testname}
packagename=${packagename##*/}
metapackagename=${PWD%%/$packagename/$testname}
metapackagename=${metapackagename##*/}

function Exit()
{

   if [ ! $1 = 0 ]; then
       echo -e "FAILED:\n"$2
   else 
       echo -e "PASSED:\n"$2
   fi

   exit $1
}


#TODO: remove this function if unused
function FilterLogcat() 
{
    #Remove everything except dex2oat from logcat.
    cat ${logcat} | grep "dex2oat" > ${logcat}_filtered
    if [ ! -s ${logcat}_filtered ] ; then
        Exit 1 "Failed to process logcat file $logcat: expected dex2oat entries not found"
    else 
        logcat=${logcat}_filtered
    fi
}

function ExtractMethodLogcat() {
    methodName=$1
    number_regexp='^[0-9]+$'
    pattern="remove_unused_loops: start .* ${metapackagename}.${packagename}.${testname}.Main"

    linenumber1=`grep -n -E "${pattern}\.${methodName}\(" ${logcat} | cut -f1 -d: | head  -1`

    if ! [[ $linenumber1 =~ $number_regexp ]] ; then
#echo "UNEXPECTED: remove_unused_loops messages not found, check if optimization is not disabled"
        return
    fi



    linenumber2=`tail -n +$((linenumber1+1)) $logcat |grep -n -E "${pattern}"  | grep -v -E "${methodName}\(" | cut -f1 -d: | head  -1`

    flag_no_other_methods="false"
    if [[ "x$linenumber2" == "x" ]]; then
        linenumber2=`cat ${logcat} | wc -l`
        flag_no_other_methods="true"
    else 
# remember that we cut linenumber 1 lines when calculating linenumber2
        linenumber2=$((linenumber2+linenumber1))
    fi


    if ! [[ $linenumber2 =~ $number_regexp ]] ; then
#        echo "UNEXPECTED: remove_unused_loops messages not found for method ${methodName}, check if optimization is not disabled"
        return
    fi

    if [[ $flag_no_other_method =~ "true" ]] ; then 
       linenumber2=$((linenumber2-1))
    fi
    

    sed -n ${linenumber1},${linenumber2}p  ${logcat} > ${logcat}_${methodName}
    if [ ! -s ${logcat}_${methodName} ] ; then
       echo "UNEXPECTED: Failed to extract remove_unused_loops messages for method ${methodName} from logcat file ${logcat}"
       return
    fi

    
}



function ExpectedApplied_postproc()
{
    expectedCount=$1
    methodName=$2
    logcat_file=${logcat}_$methodName


    ExtractMethodLogcat $methodName

    if [ ! -s ${logcat_file} ] ; then 
        str_res+="UNEXPECTED: Failed to extract remove_unused_loops messages for method ${methodName}\n"
        res=$((res + 1))
        return
    fi

    removed_loop_block_count=`cat ${logcat_file} | grep "remove_unused_loops: Remove loop blocks" | wc -l`

    if [[ "$removed_loop_block_count" == "$expectedCount" ]]; then
        str_res+="EXPECTED: remove_unused_loops marker found $expectedCount time(s) for method $methodName;\n"
        res=$((res + 0))
    elif [[ "$removed_loop_block_count" != "$expectedCount" ]]; then
        str_res+="UNEXPECTED: remove_unused_loops marker found $removed_loop_block_count time(s) instead of $expectedCount for method $methodName;\n"
        res=$((res + 1))
    else
        str_res+="UNEXPECTED: Postprocessing failed for method $methodName;\n"
        res=$((res + 1))
    fi

}

#Clean-up results dir before processing logcat:
rm -f ${logcat}_*

#Iterate over methods:
for i in "${testMethodsCounts[@]}" ; do
     methodName="${i%%:*}"
     expectedCount="${i##*:}"
     ExpectedApplied_postproc $expectedCount $methodName
done

Exit $((res)) "$str_res"

   


