#!/bin/bash
#
# Copyright (C) 2016 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


# tools' paths
#JAVA_HOME=/nfs/site/proj/slt/qa/android/tools/openjdk7-linux-x86_64
#JAVAC=${JAVA_HOME}/bin/javac
#JAVAH=${JAVA_HOME}/bin/javah

#JAVA_INC=${JAVA_HOME}/include
#ANDROID_NDK_HOME=/nfs/site/proj/slt/qa/android/tools/android-ndk-4.3-r9-linux-x86/
#ANDROID_NDK_HOME_64=/nfs/site/proj/slt/qa/android/tools/android-ndk-64bit-linux-x86/
#NDK_SYS_ROOT=${ANDROID_NDK_HOME}/platforms/android-18/arch-x86
#NDK_SYS_ROOT_64=${ANDROID_NDK_HOME_64}/platforms/android-20/arch-x86_64
#NDK_SYS_ROOT_ARM=/nfs/site/proj/slt/qa/android/tools/android-ndk-4.3-r9-linux-x86/platforms/android-18/arch-arm/
#NDK_SYS_ROOT_ARM64=/nfs/site/proj/slt/qa/android/tools/android-ndk-r10e-linux-x86_64/platforms/android-21/arch-arm64/
#INCL=${NDK_SYS_ROOT}/usr/include/
#INCL_64=${NDK_SYS_ROOT_64}/usr/include/
#CC=${ANDROID_NDK_HOME}/toolchains/x86-4.8/prebuilt/linux-x86_64/bin/i686-linux-android-gcc
#CC_64=${ANDROID_NDK_HOME_64}/toolchains/x86_64-4.9/prebuilt/linux-x86/bin/x86_64-linux-android-gcc
#CC_ARM=${ANDROID_NDK_HOME}/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc
#CC_ARM64=/nfs/site/proj/slt/qa/android/tools/android-ndk-r10e-linux-x86_64/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin/aarch64-linux-android-gcc

ANDROID_NDK_HOME=${ANDROID_NDK_HOME:="<DEFAULT PATH TO ANDROID NDK>"}
ANDROID_NDK_HOME_64=${ANDROID_NDK_HOME_64:="<DEFAULT PATH TO ANDROID NDK 64>"}
NDK_SYS_ROOT=${ANDROID_NDK_HOME}/platforms/android-18/arch-x86
NDK_SYS_ROOT_64=${ANDROID_NDK_HOME_64}/platforms/android-20/arch-x86_64
NDK_SYS_ROOT_ARM=${NDK_SYS_ROOT_ARM:="<DEFAULT PATH TO NDK /platforms/android-18/arch-arm/>"}
NDK_SYS_ROOT_ARM64=${NDK_SYS_ROOT_ARM64:="<DEFAULT PATH TO NDK 64/platforms/android-21/arch-arm64/>"}
INCL=${NDK_SYS_ROOT}/usr/include/
INCL_64=${NDK_SYS_ROOT_64}/usr/include/
CC=${ANDROID_NDK_HOME}/toolchains/x86-4.8/prebuilt/linux-x86_64/bin/i686-linux-android-gcc
CC_64=${ANDROID_NDK_HOME_64}/toolchains/x86_64-4.9/prebuilt/linux-x86/bin/x86_64-linux-android-gcc
CC_ARM=${ANDROID_NDK_HOME}/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc
CC_ARM64=${CC_ARM64:="<DEFAULT PATH TO bin/aarch64-linux-android-gcc>"}

# the script accepts the following args:
pckgname=$1
testname=$2

# default target
BUILD_TARGET=${BUILD_TARGET:="AsmToSo"}


pcgdir=`echo "$(cd $(dirname $0); pwd)/"`
testdir=${pcgdir}/${testname}

# including default build script to build Java sources
source ${progdir}/etc/default-build

bin_dir=${progdir}/bin/${testpath}
echo "pckgname: $pckgname"
echo "testname: $testname"
echo "progdir: $progdir"
echo "testpath: ${testpath}"
echo "pcgdir: ${pcgdir}"
echo "bin_dir: ${bin_dir}"


echo "Building native test libraries:"

function buildTestForArch() 
{
arch=$1
target=$2
echo "Building test ${testname} for arch ${arch}, bin dir ${bin_dir}"
mkdir -p ${bin_dir}/${arch}


case "${arch}" in
x86)     compiler=${CC}
         incl_dir=${INCL}
         ndk=${NDK_SYS_ROOT}
         additional_options="-m32 -DMY_INTEL"
             ;;
x86_64)  compiler=${CC_64}
         incl_dir=${INCL_64}
         ndk=${NDK_SYS_ROOT_64}
         additional_options="-DMY_INTEL"
         ;;
host_x86) compiler="gcc"
         incl_dir=${JAVA_INC}
         ndk=${NDK_SYS_ROOT}
         additional_options="-m32 -DMY_INTEL"
             ;;
host_x86_64) compiler="gcc"
         incl_dir=${JAVA_INC}
         ndk=${NDK_SYS_ROOT_64}
         additional_options="-DMY_INTEL"
             ;;
arm)     compiler=${CC_ARM}
         incl_dir=${INCL}
         ndk=${NDK_SYS_ROOT_ARM}
         additional_options=""
             ;;

arm64)  compiler=${CC_ARM64}
         incl_dir=${INCL_64}
         ndk=${NDK_SYS_ROOT_ARM64}
         additional_options=""
             ;;
*)        echo "Invalid option"
          exit 1

             ;;    
esac



if [ "${target}" = "AsmToSo" ] ; then
    ${compiler} -O0 -fvisibility=hidden -fPIC -I${incl_dir} -o ${bin_dir}/${arch}/libJniTest.so -shared -Wl,-soname,JniTest.so --sysroot=${ndk} ${additional_options} ${testdir}/JniTest_${arch}.s
elif [ "${target}" = "CppToAsm" ] ; then
    ${compiler} -O0 -fvisibility=hidden -fPIC -I${incl_dir} -S -o ${testdir}/JniTest_${arch}.s --sysroot=${ndk} ${additional_options} ${testdir}/JniTest.cpp
elif [ "${target}" = "CppToSo" ] ; then
    ${compiler} -O0 -fvisibility=hidden -fPIC -I${incl_dir} -o ${bin_dir}/${arch}/libJniTest.so -shared -Wl,-soname,JniTest.so --sysroot=${ndk} ${additional_options} ${testdir}/JniTest.cpp
else 
    echo "Invalid build target: ${target}"
    exit 1
fi


}

# cd test sources
pushd ${testdir}
#for arch in "x86" "x86_64" "host_x86_64" "host_x86" "arm" "arm64" ; do
for arch in "x86" "x86_64" "host_x86_64" "host_x86" "arm" "arm64" ; do
    buildTestForArch ${arch} ${BUILD_TARGET}
done


#make clean && make CppToAsm && make
popd

# copy *.s files for reference
cp ${testdir}/*.s ${testpath}/



